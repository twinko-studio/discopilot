#!/usr/bin/env python3

import argparse
from discopilot.ai.c3po import c3po
from discopilot.ai.espresso import espresso

def c3po_cli(args):
    c3pobot = c3po(engine=args.engine, model_id=args.model_id, 
                project_id=args.project_id, credentials_file=args.credentials_file)
 
    if args.detect:
        res = c3pobot.detect_language(args.text)    
        print(res)

    if args.list:
        res = c3pobot.list_languages()
        
    
    if args.list_target is not None:
        res = c3pobot.list_languages_with_target(args.list_target)
    

    if args.to_zh:
        res = c3pobot.translate_to_chinese(args.text)   
        print(res)
    
    if args.target:
        res = c3pobot.translate(args.text, args.target)
        print(res)

def espresso_cli(args):
    esp = espresso(model_id=args.model_id, platform=args.platform, env=args.env)
    res = esp.press(args.text, max_length=args.max_length, min_length=args.min_length, do_sample=args.do_sample)
    print(res)

def main():
    '''
    The main function of the discopilot CLI.

    Examples:

    ## c3po subcommand: the translator

    discopilot c3po --help
    discopilot c3po --list
    discopilot c3po --list_target zh
    discopilot c3po --detect 'Hello, World!'
    discopilot c3po 'Hello, World!' --target zh
    discopilot c3po 'Hello, World!' --to_zh
    discopilot c3po 'Hello, World!' --target ja

    ## expresso subcommand: the summarizer
    discopilot espresso --help
    # discopilot espresso "Hello, World! I am a robot, and I am here to help you."
    discopilot espresso "hello world"
    discopilot espresso ~/Code/twinko-studio/discopilot/tests/data/article.txt
    discopilot espresso ~/report/report_20230822_204907.md 
    discopilot espresso ~/Code/twinko-studio/discopilot/tests/data/article.txt --model_id sshleifer/distilbart-cnn-12-6
    

    '''
    parser = argparse.ArgumentParser(description="Discopilot CLI")

    # Create subparsers object
    subparsers = parser.add_subparsers()

    # Create parser for "c3po" subcommand
    parser_c3po = subparsers.add_parser("c3po", help="C-3PO Translator")
    parser_c3po.add_argument("text", help="The text to translate.", nargs='?')
    parser_c3po.add_argument("--target", help="The target language code.")
    parser_c3po.add_argument("--to_zh", action='store_true', help="Translate to Chinese.")
    parser_c3po.add_argument("--detect", action='store_true', help="Detect the language of the text.")
    parser_c3po.add_argument("--list", action='store_true', help="List all supported languages.")
    parser_c3po.add_argument("--list_target", help="List all supported languages with target lang.")
    parser_c3po.add_argument("--engine", default = "google", choices=["google", "huggingface"],
            help="The translation engine to use. Currently supports 'google' and 'huggingface'.")
    parser_c3po.add_argument("--model_id", help="The model to use. Required for HuggingFace.")
    parser_c3po.add_argument("--project_id", help="The Google Cloud project ID. Required for Google Cloud.")
    parser_c3po.add_argument("--credentials_file", help="The path to the Google Cloud credentials file. Required for Google Cloud.")
    parser_c3po.set_defaults(func=c3po_cli)
    
    # Create parser for "espresso" subcommand
    parser_espresso = subparsers.add_parser("espresso", help="Espresso Summarizer") 
    parser_espresso.add_argument("text", help="The text to summarize, either a string or a file path.")
    parser_espresso.add_argument("--model_id", default = "facebook/bart-large-cnn", help="The model to use. Required for HuggingFace.")
    parser_espresso.add_argument("--platform", default = "huggingface", choices=["huggingface"],
            help="The platform to use. Currently supports 'huggingface'.")
    parser_espresso.add_argument("--env", default = "inference_api", choices=["inference_api", "local"],
            help="The environment to use. Currently supports 'inference_api' and 'local'.")
    parser_espresso.add_argument("--max_length", default = 500, type=int, help="The maximum length of the summary.")
    parser_espresso.add_argument("--min_length", default = 100, type=int, help="The minimum length of the summary.")
    parser_espresso.add_argument("--do_sample", action='store_true', help="Whether to use sampling.")
    parser_espresso.set_defaults(func=espresso_cli)

    # Create parser for "hedwig" subcommand

    args = parser.parse_args()
    if 'func' in args:
        args.func(args)
    else:
        parser.print_help()

if __name__ == "__main__":
    main()